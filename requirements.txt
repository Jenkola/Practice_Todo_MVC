**Requirements**

V0.01
Begin model creation:
	-DONE: It should have a place to store todos i.e. a todos array.

	-DONE: It should have a function to add todos.
		>>Todos should be objects with 2 properties: todoText and completed.
			>>Accepts as parameter: Text to be input to Todotext.
			>>Completed is false by default.

	-DONE: It should have a function to edit the todo text.
		>>Accepts as parameters 1: Index number of todo to be updated. 2: Updated todo text string.

	-DONE: It should have a function to delete a todo.
		>>Accepts as parameter: Index number of todo to be deleted.

	-DONE: It should have a function to toggle the completed status of a todo.
		>>Accepts as parameter: Index number of todo to be toggled.

	-DONE: It should have a function to display todos, for now via a console.log().
		>>It should display a string of the completed status and the todo text.
		>>The add todos, edit todo, delete todo function should also call the display todos function.

V0.02
Toggleall function in model:
	It should have a method to toggle all todos' completed status.
		>>If all todos have are completed === true, make all todos' completed === false.
		>>Otherwise, make all todos' completed === true.
		>>Call displayTodos function afterward.

V0.03
Migrate display todos to HTML:
	-DONE: The display todos function should display the todos in index.html rather than in the console.
		>>Set up UL in index.html
		>>displayTodos should create LI elements, put in same text content as before, then append to the UL.
		>>Remove console.log methods from displaytodos.

V0.04
Delete all completed function in model:
	-DONE: It should have a function to delete all completed todos.
		>>Loops through todos (from back to front?), if completed === true, call delete todo function on that index number.

V0.05
Controls in html:
	-DONE: Create controls for model functions in index.html
		>>addTodo: Text input, 'Add todo' button.
		>>editTodoText: Number input for index, text input, 'Edit todo' button.
		>>deleteTodo: Number input for index, 'Delete todo' button.
		>>toggleCompleted: Number input for index, 'Toggle Completed' button.
		>>toggleAll: 'Toggle all' button.
		>>removeCompleted: 'Remove all completed todos' button.

V0.06
Build control handler section in JS:
	-DONE: It should have methods in control object which:
		>>Are triggered by the user clicking control buttons in index.html
		>>Call model methods, utilising the value of relevant text/number fields
		as arguments to the methods.
		>>Clear the value of the text/number fields.
		>>Calls to render (displaytodos) should be moved from the model methods to the control methods.
	-DONE: The buttons in index.html should have onclick properties to utilise the control methods.

V0.07
Add delete todo and toggle completed buttons onto HTML li items:
	-DONE: It should attach a delete todo button to each li item created.
		>>The button should have a class "deletetodobutton".
	-DONE: It should attach a toggle completed button to each li item created.
		>>The button should have a class "togglecompletedbutton".

V0.08
Delete todo and toggle completed buttons on li items should work:
	-DONE: It should have a generateID helper function that generates a unique/random ID.
	-DONE: The todo object should also be given an 'id' property when created.
	-DONE: The value of each ID property should be filled with the return of the generateID funciton.
	-DONE: It should give each li html element an 'id' which is the same as the todo's id property when a todo is added.

	-DONE: It should have a setUpEventListeners method in the controls section.
		>>It should set up a listener for 'click' in the UL.
		>>The callback should tell what button type was pressed by e.target's class.
		>>The callback should call the correct control method (delete/toggle) based on the class.
		>>The control methods for delete/toggle should accept an ID as an argument.
		>>The callback should pass the id of the button's parent element (i.e. the li element) into the control method.
	-DONE: There should be a helper method to find the index number of a todo in the todos array based on it's ID property value.
		>>The control method should utilise the find index number helper method to get the index number to pass into the model method.
	-DONE: Remove the old toggle completed and delete todo controls from the controls section of the HTML.

V0.09
Add handlebars.js. Adapt displayTodos function to utilise a handlebars template to create li items:
	DONE:-Add handlebars.js to directory.
	DONE:-Run handlebars.js in HTML file.
	DONE:-Create handlebars template for li items in <script> in html file.
	DONE:-Adapt displaytodos to compile handlebars object.
	DONE:-Adapt displaytodos to supply handlebars object containing the id and text for the todo.

V0.1
Substitute in JQuery methods for DOM selection and manipulation:
	DONE:-Add Jquery to directort.
	DONE:-Run Jquery in HTML file.
	DONE:-Replace all DOM selectors with JQuery selectors.
	DONE:-Replace all DOM manipulation with JQuery methods.

V0.11
Make completed status a checkbox on each li item:
	DONE:-Add checkbox to handlebars template in index.html
	DONE:-Update displayTodos function to check checkbox if completed === true.
	DONE:-Update setUpEventListeners to listen for a click in checkbox and trigger toggleCompleted.
	DONE:-Remove Toggle Completed button from handlebars template.

V0.12
Display todo text in a text input field on each li item. User can edit todo text via this field:
	DONE:-Add text input field to each li item on handlebars template.
	DONE:-The todo text is displayed as the value of this text input field.
	DONE:-Edit todo takes the value of the text field in the li item and finds the relevant index number.
	DONE:-Remove edit todo controls from controls section of index.html.
	DONE:-Edit todo is triggered when user blurs text field and takes the updated value of the field.
	DONE:-Remove Edit todo button from template and associated event listeners.
	

V0.13
Improve event listeners:
	DONE:-Add todo also triggers if user presses enter key in add todo text field.
	DONE:-If user presses escape key in add todo text field, field clears and blur.
	DONE:-Edit todo also triggers if user presses enter key in edit todo text field.
	DONE:-If user presses escape key in edit todo text field, field reverts to pre-existing todo text.


TODO:
	-Have an element in html that states how many todos there are and how many outstanding.
		e.g. '3 of 5 todos outstanding'
	-Have a render function (utilising handlebars.js) to render the above item.
	-Utilise localStorage to store todos between sessions.